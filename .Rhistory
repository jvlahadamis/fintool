usethis::use_r("morningstar")
devtools::document()
usethis::use_package("purrr")
usethis::use_package(purrr)
usethis::use_package("purrr")
usethis::use_package("dplyr")
usethis::use_package("httr")
usethis::use_package("lubridate")
devtools::document()
devtools::check()
library(fintool)
usethis::use_testthat()
usethis::use_test()
RL <- httr::modify_url(url =  "https://mp.morningstarcommodity.com", path = paste0("/lds/feeds/", feed, "/ts?", "contract=", contract, "&fromDateTime=", from))
function(feed = "MGEX_Futures_continuous",
contract = "MWE_001_Month",
from = "2000-01-01",
iuser = "a@abc.com",
ipassword = "password")
{
mpurl <- "https://mp.morningstarcommodity.com/lds/feeds/MGEX_Futures_continuous/ts?Symbol=MWE_001_Month"
userpw <- paste0(iuser,":",ipassword)
if (feed %in% c("MGEX_Futures")) {
URL <- httr::modify_url(url =  "https://mp.morningstarcommodity.com", path = paste0("/lds/feeds/", feed, "/ts?", "contract=", contract, "&fromDateTime=", from))
}
if (feed %in% c("MGEX_Futures_continuous",
"ICE_Canada_FuturesPrices_continuous"
)) {
URL <- httr::modify_url(url = "https;//mp.morningstarcommodity.com", path = paste0("/lds/feeds/", feed, "/ts?", "contract=", contract, "&fromDateTime=", from))
}
httr::handle_reset(URL)
x <- httr::GET(url = URL, httr::authenticate(user = iuser, password = ipassword, type = "basic"))
x <- httr::content(x)
if (length(x) > 0) {
if (length(x %>% purrr::flatten() %>% .$series %>% .$values %>% purrr::flatten()) > 0) {
out <- dplyr::tibble(
date = as.character(lubridate::ymd(x %>% purrr::flatten() %>% purrr::flatten() %>% .$dates)) %>% lubridate::ymd(),
opt = feed == "MGEX_Futures",
value = ifelse(opt == T,
as.numeric(x %>% purrr::flatten() %>% purrr::flatten() %>% .$values %>% .[[4]] %>% purrr::flatten()),
as.numeric(x %>% purrr::flatten() %>% purrr::flatten() %>% .$values %>% .[[1]] %>% purrr::flatten())
)
) %>%
dplyr::select(-opt) %>%
dplyr::mutate(value = ifelse(is.nan(value), NA, value))
} else{
out <- dplyr::tibble(date = character(),
value = numeric(),
fwdmnt = numeric(),
fwdyr = numeric())
}
if (length(colnames(out)) == 2) {
colnames(out)[2] <- sub("@", "", contract)
}
return(out)
}
getAgPrice <- function(feed = "MGEX_Futures_continuous",
contract = "MWE_001_Month",
from = "2000-01-01",
iuser = "a@abc.com",
ipassword = "password") {
mpurl <- "https://mp.morningstarcommodity.com/lds/feeds/MGEX_Futures_continuous/ts?Symbol=MWE_001_Month"
userpw <- paste0(iuser,":",ipassword)
if (feed %in% c("MGEX_Futures")) {
URL <- httr::modify_url(url =  "https://mp.morningstarcommodity.com", path = paste0("/lds/feeds/", feed, "/ts?", "contract=", contract, "&fromDateTime=", from))
}
if (feed %in% c("MGEX_Futures_continuous",
"ICE_Canada_FuturesPrices_continuous"
)) {
URL <- httr::modify_url(url = "https;//mp.morningstarcommodity.com", path = paste0("/lds/feeds/", feed, "/ts?", "contract=", contract, "&fromDateTime=", from))
}
httr::handle_reset(URL)
x <- httr::GET(url = URL, httr::authenticate(user = iuser, password = ipassword, type = "basic"))
x <- httr::content(x)
if (length(x) > 0) {
if (length(x %>% purrr::flatten() %>% .$series %>% .$values %>% purrr::flatten()) > 0) {
out <- dplyr::tibble(
date = as.character(lubridate::ymd(x %>% purrr::flatten() %>% purrr::flatten() %>% .$dates)) %>% lubridate::ymd(),
opt = feed == "MGEX_Futures",
value = ifelse(opt == T,
as.numeric(x %>% purrr::flatten() %>% purrr::flatten() %>% .$values %>% .[[4]] %>% purrr::flatten()),
as.numeric(x %>% purrr::flatten() %>% purrr::flatten() %>% .$values %>% .[[1]] %>% purrr::flatten())
)
) %>%
dplyr::select(-opt) %>%
dplyr::mutate(value = ifelse(is.nan(value), NA, value))
} else{
out <- dplyr::tibble(date = character(),
value = numeric(),
fwdmnt = numeric(),
fwdyr = numeric())
}
if (length(colnames(out)) == 2) {
colnames(out)[2] <- sub("@", "", contract)
}
return(out)
}
View(getAgPrice)
getAgPrice("MGEX_Futures_continuous",)
getAgPrice(feed = "MGEX_Futures_continuous", contract = "MWE_001_Month", from = "2000-01-01", iuser = "trading@ualberta.ca", ipassword = "#5GvhnRCvk")
getAgPrice("MGEX_Futures_continuous",)
getAgPrice <- function(feed = "MGEX_Futures_continuous",
contract = "MWE_001_Month",
from = "2000-01-01",
iuser = "a@abc.com",
ipassword = "password") {
mpurl <- "https://mp.morningstarcommodity.com/lds/feeds/MGEX_Futures_continuous/ts?Symbol=MWE_001_Month"
userpw <- paste0(iuser,":",ipassword)
if (feed %in% c("MGEX_Futures")) {
URL <- httr::modify_url(url =  "https://mp.morningstarcommodity.com", path = paste0("/lds/feeds/", feed, "/ts?", "contract=", contract, "&fromDateTime=", from))
}
if (feed %in% c("MGEX_Futures_continuous",
"ICE_Canada_FuturesPrices_continuous"
)) {
URL <- httr::modify_url(url = "https://mp.morningstarcommodity.com", path = paste0("/lds/feeds/", feed, "/ts?", "contract=", contract, "&fromDateTime=", from))
}
httr::handle_reset(URL)
x <- httr::GET(url = URL, httr::authenticate(user = iuser, password = ipassword, type = "basic"))
x <- httr::content(x)
if (length(x) > 0) {
if (length(x %>% purrr::flatten() %>% .$series %>% .$values %>% purrr::flatten()) > 0) {
out <- dplyr::tibble(
date = as.character(lubridate::ymd(x %>% purrr::flatten() %>% purrr::flatten() %>% .$dates)) %>% lubridate::ymd(),
opt = feed == "MGEX_Futures",
value = ifelse(opt == T,
as.numeric(x %>% purrr::flatten() %>% purrr::flatten() %>% .$values %>% .[[4]] %>% purrr::flatten()),
as.numeric(x %>% purrr::flatten() %>% purrr::flatten() %>% .$values %>% .[[1]] %>% purrr::flatten())
)
) %>%
dplyr::select(-opt) %>%
dplyr::mutate(value = ifelse(is.nan(value), NA, value))
} else{
out <- dplyr::tibble(date = character(),
value = numeric(),
fwdmnt = numeric(),
fwdyr = numeric())
}
if (length(colnames(out)) == 2) {
colnames(out)[2] <- sub("@", "", contract)
}
return(out)
}
getAgPrice(feed = "MGEX_Futures_continuous", contract = "MWE_001_Month", from = "2000-01-01", iuser = "trading@ualberta.ca", ipassword = "#5GvhnRCvk")
library(dplyr)
getAgPrice(feed = "MGEX_Futures_continuous", contract = "MWE_001_Month", from = "2000-01-01", iuser = "trading@ualberta.ca", ipassword = "#5GvhnRCvk")
library(fintool)
#install.packages("devtools")
devtools::install_github("jvlahadmis/fintool")
devtools::check_win_release()
devtools::check_win_devel()
devtools::check_mac_release()
devtools::install_github("jvlahadamis/fintool")
